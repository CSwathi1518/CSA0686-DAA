#include <stdio.h>
#include <stdlib.h>
 
void floydWarshall(int **graph, int n)
{
    int i, j, k;
    for (k = 0; k < n; k++)
    {
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < n; j++)
            {
                if (graph[i][j] > graph[i][k] + graph[k][j])
                    graph[i][j] = graph[i][k] + graph[k][j];
            }
        }
    }
}
 
int main(void)
{
    int n, i, j;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    int **graph = (int **)malloc((long unsigned) n * sizeof(int *));
    for (i = 0; i < n; i++)
    {
        graph[i] = (int *)malloc((long unsigned) n * sizeof(int));
    }
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            if (i == j)
                graph[i][j] = 0;
            else
                graph[i][j] = 100;
        }
    }
    printf("Enter the edges: \n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            printf("[%d][%d]: ", i, j);
            scanf("%d", &graph[i][j]);
        }
    }
    printf("The original graph is:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }
    floydWarshall(graph, n);
    printf("The shortest path matrix is:\n");
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            printf("%d ", graph[i][j]);
        }
        printf("\n");
    }
    return 0;
}

OUTPUT;
Enter the number of vertices: 4
Enter the edges:
[0][0]: 2
[0][1]: 5
[0][2]: 6
[0][3]: 7
[1][0]: 4
[1][1]: 1
[1][2]: 2
[1][3]: -9
[2][0]: -8
[2][1]: -7
[2][2]: 6
[2][3]: 5
[3][0]: 4
[3][1]: 3
[3][2]: 2
[3][3]: 1
The original graph is:
2 5 6 7
4 1 2 -9
-8 -7 6 5
4 3 2 1
The shortest path matrix is:
-26 -25 -23 -49
-30 -29 -27 -53
-37 -36 -34 -60
-45 -44 -42 -68
