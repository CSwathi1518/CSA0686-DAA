#include <stdio.h>
#include <stdlib.h>
void swap(int* a, int* b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}
int partition(int arr[], int low, int high)
{
    int pivot = arr[high]; 
    int i = low - 1; 

    for (int j = low; j <= high - 1; j++)
    {
        if (arr[j] <= pivot)
        {
            i++; 
            swap(&arr[i], &arr[j]); 
        }
    }
    swap(&arr[i + 1], &arr[high]); 
    return (i + 1); 
}
void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}
void printArray(int arr[], int size)
{
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
int* createArray(int size)
{
    int* arr = (int*)malloc(size * sizeof(int));
    if (arr == NULL)
    {
        printf("Memory allocation failed\n");
        exit(1); 
    }
    return arr;
}
void readArray(int arr[], int size)
{
    printf("Enter %d elements:\n", size);
    for (int i = 0; i < size; i++)
        scanf("%d", &arr[i]);
}
int main()
{
    int size; 
    printf("Enter the size of the array:\n");
    scanf("%d", &size);
    int* arr = createArray(size);
    readArray(arr, size);
    printf("Original array:\n");
    printArray(arr, size);
    quickSort(arr, 0, size - 1);
    printf("Sorted array:\n");
    printArray(arr, size);
    free(arr);
	return 0;
}



OUTPUT:
Enter the size of the array:
5
Enter 5 elements:
3
9
0
4
1
Original array:
3 9 0 4 1
Sorted array:
0 1 3 4 9
